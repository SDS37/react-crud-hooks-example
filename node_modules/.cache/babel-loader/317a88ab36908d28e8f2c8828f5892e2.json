{"ast":null,"code":"import _slicedToArray from \"/Users/sal/Desktop/github/react-crud-hooks-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/sal/Desktop/github/react-crud-hooks-example/src/structure/LoaderMessage.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types'; // import { css } from 'emotion/macro';\n// const loaderMessageStyle = css`\n//   .loading {\n//     font-size: 3em;\n//     font-weight: bold;\n//     width: 100%;\n//     text-align: center;\n//     margin: 0;\n//     padding-bottom: 3em;\n//   }\n// `;\n\nconst LoaderMessage = ({\n  loadingMessage,\n  isLoading\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        showLoadingMessage = _useState2[0],\n        setShowLoadingMessage = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        showDoneMessage = _useState4[0],\n        setShowDoneMessage = _useState4[1];\n\n  const isLoadingPreviousValue = useRef(null);\n  useEffect(() => {\n    let loadingMessageDelay;\n    let doneMessageDelay;\n\n    if (isLoading) {\n      loadingMessageDelay = setTimeout(() => {}, 400);\n      setShowLoadingMessage(true);\n    }\n\n    isLoadingPreviousValue.current = isLoading;\n    return () => {\n      clearTimeout(loadingMessageDelay);\n      setShowLoadingMessage(false);\n    };\n  }, [isLoading]);\n  return React.createElement(\"div\", {\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, showLoadingMessage && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, loadingMessage));\n};\n\nLoaderMessage.propTypes = {\n  loadingMessage: PropTypes.string.isRequired,\n  isLoading: PropTypes.bool\n};\nexport default LoaderMessage; // const LoaderMessage = ({ loadingMsg, doneMsg, isLoading }) => {\n//   const isLoadingPreviousValue = useRef(null);\n//   const loadingMessageDelay = useRef(null);\n//   const doneMessageDelay = useRef(null);\n//   const [showLoadingMessage, setShowLoadingMessage] = useState(false);\n//   const [showDoneMessage, setShowDoneMessage] = useState(false);\n//   useLayoutEffect(() => {\n//     if (isLoading) {\n//       loadingMessageDelay.current = setTimeout(() => {\n//         setShowLoadingMessage(true);\n//       }, 400);\n//     } else {\n//       if (isLoadingPreviousValue.current) {\n//         setShowDoneMessage(true);\n//         doneMessageDelay.current = setTimeout(() => {\n//           setShowDoneMessage(false);\n//         }, 300);\n//       }\n//     }\n//     isLoadingPreviousValue.current = isLoading;\n//     return () => {\n//       setShowLoadingMessage(false);\n//       setShowDoneMessage(false);\n//       clearTimeout(loadingMessageDelay.current);\n//       clearTimeout(doneMessageDelay.current);\n//     };\n//   }, [isLoading]);\n//   return (\n//     <div\n//       aria-live=\"assertive\"\n//       aria-atomic=\"true\"\n//       className={loaderMessageStyle}\n//     >\n//       {showLoadingMessage && <p className=\"loading\">{loadingMsg}</p>}\n//       {showDoneMessage && <p className=\"visually-hidden\">{doneMsg}</p>}\n//     </div>\n//   );\n// };\n// LoaderMessage.propTypes = {\n//   loadingMsg: PropTypes.string.isRequired,\n//   doneMsg: PropTypes.string.isRequired,\n//   isLoading: PropTypes.bool,\n// };\n// export default LoaderMessage;","map":{"version":3,"sources":["/Users/sal/Desktop/github/react-crud-hooks-example/src/structure/LoaderMessage.js"],"names":["React","useEffect","useState","useRef","PropTypes","LoaderMessage","loadingMessage","isLoading","showLoadingMessage","setShowLoadingMessage","showDoneMessage","setShowDoneMessage","isLoadingPreviousValue","loadingMessageDelay","doneMessageDelay","setTimeout","current","clearTimeout","propTypes","string","isRequired","bool"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,cAAD;AAAiBC,EAAAA;AAAjB,CAAD,KAAiC;AAAA,oBACDL,QAAQ,CAAC,KAAD,CADP;AAAA;AAAA,QAC9CM,kBAD8C;AAAA,QAC1BC,qBAD0B;;AAAA,qBAEPP,QAAQ,CAAC,KAAD,CAFD;AAAA;AAAA,QAE9CQ,eAF8C;AAAA,QAE7BC,kBAF6B;;AAGrD,QAAMC,sBAAsB,GAAGT,MAAM,CAAC,IAAD,CAArC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,mBAAJ;AACA,QAAIC,gBAAJ;;AAEA,QAAGP,SAAH,EAAc;AACZM,MAAAA,mBAAmB,GAAGE,UAAU,CAAE,MAAM,CAAE,CAAV,EAAY,GAAZ,CAAhC;AACAN,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;;AAEDG,IAAAA,sBAAsB,CAACI,OAAvB,GAAiCT,SAAjC;AACA,WAAO,MAAM;AACXU,MAAAA,YAAY,CAACJ,mBAAD,CAAZ;AACAJ,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,KAHD;AAID,GAdQ,EAcN,CAACF,SAAD,CAdM,CAAT;AAgBA,SACE;AAAK,iBAAU,WAAf;AAA2B,mBAAY,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,kBAAkB,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,cAAJ,CADzB,CADF;AAKD,CA1BD;;AA4BAD,aAAa,CAACa,SAAd,GAA0B;AACxBZ,EAAAA,cAAc,EAAEF,SAAS,CAACe,MAAV,CAAiBC,UADT;AAExBb,EAAAA,SAAS,EAAEH,SAAS,CAACiB;AAFG,CAA1B;AAKA,eAAehB,aAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n// import { css } from 'emotion/macro';\n// const loaderMessageStyle = css`\n//   .loading {\n//     font-size: 3em;\n//     font-weight: bold;\n//     width: 100%;\n//     text-align: center;\n//     margin: 0;\n//     padding-bottom: 3em;\n//   }\n// `;\n\nconst LoaderMessage = ({loadingMessage, isLoading}) => {\n  const [showLoadingMessage, setShowLoadingMessage] = useState(false);\n  const [showDoneMessage, setShowDoneMessage] = useState(false);\n  const isLoadingPreviousValue = useRef(null);\n\n  useEffect(() => {\n    let loadingMessageDelay;\n    let doneMessageDelay;\n\n    if(isLoading) {\n      loadingMessageDelay = setTimeout( () => {}, 400);\n      setShowLoadingMessage(true);\n    }\n\n    isLoadingPreviousValue.current = isLoading;\n    return () => {\n      clearTimeout(loadingMessageDelay);\n      setShowLoadingMessage(false);\n    }\n  }, [isLoading])\n\n  return (\n    <div aria-live=\"assertive\" aria-atomic=\"true\">\n      {showLoadingMessage && <p>{loadingMessage}</p>}\n    </div>\n  );\n}\n\nLoaderMessage.propTypes = {\n  loadingMessage: PropTypes.string.isRequired,\n  isLoading: PropTypes.bool,\n};\n\nexport default LoaderMessage;\n\n// const LoaderMessage = ({ loadingMsg, doneMsg, isLoading }) => {\n//   const isLoadingPreviousValue = useRef(null);\n//   const loadingMessageDelay = useRef(null);\n//   const doneMessageDelay = useRef(null);\n//   const [showLoadingMessage, setShowLoadingMessage] = useState(false);\n//   const [showDoneMessage, setShowDoneMessage] = useState(false);\n\n//   useLayoutEffect(() => {\n//     if (isLoading) {\n//       loadingMessageDelay.current = setTimeout(() => {\n//         setShowLoadingMessage(true);\n//       }, 400);\n//     } else {\n//       if (isLoadingPreviousValue.current) {\n//         setShowDoneMessage(true);\n//         doneMessageDelay.current = setTimeout(() => {\n//           setShowDoneMessage(false);\n//         }, 300);\n//       }\n//     }\n//     isLoadingPreviousValue.current = isLoading;\n//     return () => {\n//       setShowLoadingMessage(false);\n//       setShowDoneMessage(false);\n//       clearTimeout(loadingMessageDelay.current);\n//       clearTimeout(doneMessageDelay.current);\n//     };\n//   }, [isLoading]);\n\n//   return (\n//     <div\n//       aria-live=\"assertive\"\n//       aria-atomic=\"true\"\n//       className={loaderMessageStyle}\n//     >\n//       {showLoadingMessage && <p className=\"loading\">{loadingMsg}</p>}\n//       {showDoneMessage && <p className=\"visually-hidden\">{doneMsg}</p>}\n//     </div>\n//   );\n// };\n\n// LoaderMessage.propTypes = {\n//   loadingMsg: PropTypes.string.isRequired,\n//   doneMsg: PropTypes.string.isRequired,\n//   isLoading: PropTypes.bool,\n// };\n\n// export default LoaderMessage;\n"]},"metadata":{},"sourceType":"module"}