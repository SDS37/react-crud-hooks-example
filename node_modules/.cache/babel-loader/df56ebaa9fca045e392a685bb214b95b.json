{"ast":null,"code":"import _objectSpread from \"/Users/sal/Desktop/github/react-crud-hooks-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"/Users/sal/Desktop/github/react-crud-hooks-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/sal/Desktop/github/react-crud-hooks-example/src/structure/FocusLink.js\";\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst FocusLink = (_ref) => {\n  let to = _ref.to,\n      children = _ref.children,\n      activeClassName = _ref.activeClassName,\n      props = _objectWithoutProperties(_ref, [\"to\", \"children\", \"activeClassName\"]);\n\n  const newTo = typeof to === 'string' ? {\n    pathname: to,\n    state: {\n      focus: true\n    }\n  } : _objectSpread({}, to, {\n    state: to.state ? _objectSpread({}, to.state, {\n      focus: true\n    }) : {\n      focus: true\n    }\n  });\n  return activeClassName ? React.createElement(NavLink, Object.assign({\n    to: newTo\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), children) : React.createElement(Link, Object.assign({\n    to: newTo\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), children);\n};\n\nFocusLink.propTypes = {\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n    search: PropTypes.string,\n    state: PropTypes.object\n  })]).isRequired,\n  children: PropTypes.node.isRequired,\n  activeClassName: PropTypes.string\n};\nexport default FocusLink;","map":{"version":3,"sources":["/Users/sal/Desktop/github/react-crud-hooks-example/src/structure/FocusLink.js"],"names":["React","Link","NavLink","PropTypes","FocusLink","to","children","activeClassName","props","newTo","pathname","state","focus","propTypes","oneOfType","string","shape","isRequired","search","object","node"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,OAAf,QAA8B,kBAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,SAAS,GAAG,UAAiD;AAAA,MAA9CC,EAA8C,QAA9CA,EAA8C;AAAA,MAA1CC,QAA0C,QAA1CA,QAA0C;AAAA,MAAhCC,eAAgC,QAAhCA,eAAgC;AAAA,MAAZC,KAAY;;AACjE,QAAMC,KAAK,GACT,OAAOJ,EAAP,KAAc,QAAd,GACI;AACEK,IAAAA,QAAQ,EAAEL,EADZ;AAEEM,IAAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT;AAFT,GADJ,qBAMSP,EANT;AAOMM,IAAAA,KAAK,EAAEN,EAAE,CAACM,KAAH,qBAAgBN,EAAE,CAACM,KAAnB;AAA0BC,MAAAA,KAAK,EAAE;AAAjC,SAA0C;AAAEA,MAAAA,KAAK,EAAE;AAAT;AAPvD,IADF;AAUA,SAAOL,eAAe,GACpB,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAEE;AAAb,KAAwBD,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGF,QADH,CADoB,GAKpB,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAEG;AAAV,KAAqBD,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGF,QADH,CALF;AASD,CApBD;;AAsBAF,SAAS,CAACS,SAAV,GAAsB;AACpBR,EAAAA,EAAE,EAAEF,SAAS,CAACW,SAAV,CAAoB,CACtBX,SAAS,CAACY,MADY,EAEtBZ,SAAS,CAACa,KAAV,CAAgB;AACdN,IAAAA,QAAQ,EAAEP,SAAS,CAACY,MAAV,CAAiBE,UADb;AAEdC,IAAAA,MAAM,EAAEf,SAAS,CAACY,MAFJ;AAGdJ,IAAAA,KAAK,EAAER,SAAS,CAACgB;AAHH,GAAhB,CAFsB,CAApB,EAODF,UARiB;AASpBX,EAAAA,QAAQ,EAAEH,SAAS,CAACiB,IAAV,CAAeH,UATL;AAUpBV,EAAAA,eAAe,EAAEJ,SAAS,CAACY;AAVP,CAAtB;AAaA,eAAeX,SAAf","sourcesContent":["import React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst FocusLink = ({ to, children, activeClassName, ...props }) => {\n  const newTo =\n    typeof to === 'string'\n      ? {\n          pathname: to,\n          state: { focus: true },\n        }\n      : {\n          ...to,\n          state: to.state ? { ...to.state, focus: true } : { focus: true },\n        };\n  return activeClassName ? (\n    <NavLink to={newTo} {...props}>\n      {children}\n    </NavLink>\n  ) : (\n    <Link to={newTo} {...props}>\n      {children}\n    </Link>\n  );\n};\n\nFocusLink.propTypes = {\n  to: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string,\n      state: PropTypes.object,\n    }),\n  ]).isRequired,\n  children: PropTypes.node.isRequired,\n  activeClassName: PropTypes.string,\n};\n\nexport default FocusLink;\n"]},"metadata":{},"sourceType":"module"}